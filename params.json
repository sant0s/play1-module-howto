{"name":"Creating and releasing a Play 1 module","tagline":"","body":"Creating and releasing a Play 1 module\r\n======================================\r\n\r\nThe sections below describe the steps required to create and release a Play 1 module along with a corresponding sample application:\r\n\r\n* The steps are based on how <a href=\"http://sant0s.github.io/play1-chart/\" target=\"_blank\">Play 1 Chart</a> was created\r\n* Some steps may be redundant or missing\r\n* The order of the steps is not strict i.e. some steps may be executed earlier/later than specified\r\n* Some steps may vary according to user preferences (e.g. preferred text editor)\r\n* `<>` refers to a placeholder (e.g. `<module>` is a placeholder for a module name)\r\n* Linux, Eclipse and Play 1.3 are assumed to be part of the development environment\r\n* UNIX commands are assumed to take place on the path determined by the most recently executed `cd` command\r\n\r\nCreate module\r\n-------------\r\n\r\n1. Create module: `play new-module <module>`\r\n  - The module name must match regex `[a-zA-Z]+`\r\n1. Build module: `cd <module>; play build-module`\r\n  - Press enter when asked about required Play Framework versions\r\n1. Add JAR files required by the module to the `lib` directory\r\n1. Eclipsify module: `cd ..; play eclipsify <module>`\r\n1. Import module project into Eclipse:\r\n  - `File -> Import -> General -> Existing Project into Workspace`\r\n1. Add module code to the `src` directory under package `play.modules.<module>`\r\n1. Add module fast tags to under `app/tags`\r\n1. Write and execute tests\r\n1. Add documentation to `documentation/manual/home.textile`\r\n1. Document all public API methods using Javadoc\r\n1. Execute `play javadoc` and check that:\r\n  1. All public API methods are documented\r\n  1. No module related Javadoc errors are found in log files (under the `logs` directory)\r\n1. Check that no code problems are reported by Eclipse\r\n1. Check that no unnecessary logging is generated by the module (search the code for `Logger`)\r\n1. Build module: `cd <module>; play build-module`\r\n  - Press enter when asked about required Play Framework versions\r\n\r\nCreate module sample application\r\n--------------------------------\r\n\r\n1. Create sample application under the module's directory: `cd <module>; play new samples-and-tests; cd samples-and-tests`\r\n  - Enter `Play <module> Module App` when asked about the application name\r\n1. Add `samples-and-tests/app` as a source folder in Eclipse (in order to navigate through source files)\r\n1. Set `<module>` as a sample application's dependency during development: see [Appendix A](#appendixa)\r\n1. Resolve dependencies: `play deps`\r\n1. File `<module>` shows up under the modules directory and its content is the path to the module\r\n1. Check that the module can be used:\r\n  1. `play <module>:hello`: `Hello` is displayed\r\n  1. `play run`: `INFO ~ Module <module> is available (<path to module>)` is displayed\r\n1. Implement the sample application\r\n1. Write and execute tests\r\n\r\nRelease module\r\n--------------\r\n\r\n1. `cd <module>`\r\n1. Remove unnecessary files/directories (e.g. `conf/messages`, `conf/routes`)\r\n1. `rm -fr dist; play build-module`\r\n  - Press enter when asked about required Play Framework versions\r\n1. Test the sample application\r\n  1. `cd samples-and-tests`\r\n  1. `play test` and execute automated tests (`http://localhost:9000/@tests`)\r\n  1. `play clean; play deps; play run` and test manually (`http://localhost:9000`)\r\n1. Configure the sample application for release\r\n  1. Add `<module>` as a sample application's dependency for release: see [Appendix B](#appendixb)\r\n  1. `play deps; play clean`\r\n  1. Remove unnecessary directories: `javadoc`, `modules` and `test-result`\r\n  1. Check that no unnecessary files exist\r\n1. Configure the module for release and archive it\r\n  1. Set `<module>` dependencies for release: see [Appendix C](#appendixc)\r\n  1. `cd <module>; rm -fr dist; play build-module`\r\n    - Press enter when asked about required Play Framework versions\r\n  1. A zip file is generated under `<module>/dist`\r\n  1. Exclude unnecessary files from the module's zip file: `zip -d <module>-<version>.zip README commands.pyc`\r\n  1. Exclude any other unnecessary files/directories:\r\n    1. Files: `.classpath`, `.project`, `.gitignore`\r\n    1. Directories: `.settings`, `eclipse`, `javadoc`, `logs`, `.git`, empty directories (e.g. `public`)\r\n  1. Archive the module's zip file under a release directory (e.g. outside the module directory, in a directory named `<release date>`)\r\n  1. `rm -fr dist`\r\n1. Add module to local Git repository: see [Appendix D](#appendixd)\r\n1. Publish module on GitHub: see [Appendix E](#appendixe)\r\n1. Create module web page in GitHub: see [Appendix F](#appendixf)\r\n1. Post a module registration request on the play-framework Google Group using the e-mail template specified in [Appendix G](#appendixg)\r\n\r\n<a name=\"appendixa\"></a>Appendix A - Sample application dependencies during development\r\n---------------------------------------------------------------------------------------\r\n\r\nIn order to set `<module>` as a sample application's dependency during development, set the contents of the sample application's `conf/dependencies.yml` to:\r\n\r\n```\r\n# Application dependencies\r\n\r\nrequire:\r\n    - play\r\n    - <module> -> <module> <version>\r\n\r\nrepositories:\r\n    - <repository>:\r\n        type: local\r\n        artifact: \"<path to module>\"\r\n        contains:\r\n            - <module> -> *\r\n```\r\n\r\nwhere <version> is the module version (e.g. `0.1`).\r\n\r\n**NB: `dependencies.yml` must not include any tab characters.**\r\n\r\n<a name=\"appendixb\"></a>Appendix B - Sample application dependencies for release\r\n--------------------------------------------------------------------------------\r\n\r\nIn order to set `<module>` as a sample application's dependency for release, set the contents of the sample application's `conf/dependencies.yml` to:\r\n\r\n```\r\n# Application dependencies\r\n\r\nrequire:\r\n    - play -> <module> <version>\r\n```\r\n\r\nwhere <version> is the module version (e.g. `0.1`).\r\n\r\n**NB: `dependencies.yml` must not include any tab characters.**\r\n\r\n<a name=\"appendixc\"></a>Appendix C - Module dependencies for release\r\n--------------------------------------------------------------------\r\n\r\nIn order to configure the module's dependencies for release, set the contents of the module's `conf/dependencies.yml` to:\r\n\r\n```\r\nself: play -> <module> <version>\r\n\r\nrequire:\r\n    - <module>\r\n```\r\n\r\nwhere <version> is the module version (e.g. `0.1`).\r\n\r\n**NB: `dependencies.yml` must not include any tab characters.**\r\n\r\n<a name=\"appendixd\"></a>Appendix D - Add module to local Git repository\r\n-----------------------------------------------------------------------\r\n\r\n1. `cd <module_directory>`\r\n1. `git init`1. `vi .gitignore` and include (at least):\r\n\r\n        .classpath\r\n        eclipse\r\n        .project\r\n        .settings\r\n        commands.pyc\r\n1. `vi .gitignore` and include (at least):\r\n\r\n        .classpath\r\n        eclipse\r\n        .project\r\n        .settings\r\n        commands.pyc\r\n\r\n1. `vi README` (recommended for all GitHub repositories):\r\n\r\n        # play1-<module>\r\n        Play 1 <module> module\r\n\r\n        Home page: http://<user>.github.io/play1-<module>/\r\n\r\n1. `vi LICENSE` (recommended for all GitHub repositories)\r\n1. `git status`: all files should be unstaged\r\n1. Add all files recursively: `git add .`\r\n1. `git status`: all files should be staged\r\n1. Commit: `git commit -m \"Play 1 <module> module <version>\"`\r\n1. Tag project: `git tag <tagname>` (e.g. `git tag 0.1.0`)\r\n1. `git status`: all files should be committed i.e. on the master HEAD of the local copy\r\n\r\n<a name=\"appendixe\"></a>Appendix E - Publish module on GitHub\r\n-------------------------------------------------------------\r\n\r\n1. Create repository in GitHub:\r\n  1. Log in GitHub\r\n  1. New repository\r\n  1. Name: `play1-<module>`\r\n  1. Description (optional): Play 1 `<module>` module\r\n  1. Public\r\n  1. Create repository\r\n  1. Note the repository SSH URL: `git@github.com:<user>/play1-<module>.git`\r\n1. Push local repository to GitHub one:\r\n  1. `cd <module>`\r\n  1. Associate GitHub (remote) repository with local one: `git remote add origin <repository SSH URL>`\r\n  1. Push files from local repository to GitHub: `git push -u origin master`\r\n  1. Push tag to remote: `git push origin <tagname>` (e.g. `git push origin 0.1.0`)\r\n\r\n<a name=\"appendixf\"></a>Appendix F - Create module web page in GitHub\r\n---------------------------------------------------------------------\r\n\r\n1. `cd <module release directory>` (where the module's zip file resides)\r\n1. Convert module's textile documentation to GitHub's markdown: `pandoc <path to module>/documentation/manual/home.textile -t markdown -o home.md`\r\n1. In Github, go to the repository, press Settings and then automatic page generator\r\n1. Copy/paste the contents of `home.md` onto the body\r\n1. Press \"Continue to layouts\"\r\n1. Select layout\r\n1. Preview page and check that everything's ok, as GitHub Markdown is different from Markdown (adjust text if necessary)\r\n1. Publish page\r\n\r\n<a name=\"appendixg\"></a>Appendix G - Module registration request e-mail template\r\n--------------------------------------------------------------------------------\r\n\r\n```\r\nSubject: [play-framework] [1.3.x] Module registration request: <module>\r\nTo: play-framework@googlegroups.com\r\n\r\n\r\nModule name:\r\n<module>\r\n \r\nDisplay name:\r\n<module display name>\r\n \r\nDescription:\r\nThe <module display name> module <module's purpose>.\r\n \r\nProject home page:\r\nhttp://<user>.github.io/<module repository name on GitHub>/\r\n```\r\n\r\nReferences\r\n----------\r\n\r\n* <a href=\"https://www.playframework.com/documentation/1.3.x/modules\" target=\"_blank\">Play modules</a>\r\n* <a href=\"https://www.packtpub.com/books/content/play-framework-introduction-writing-modules\" target=\"_blank\">Play Framework: Introduction to Writing Modules | PACKT Books</a>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}